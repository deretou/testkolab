# Fixture manager for MongoRecords

## Setup

In your protected/config/main.php config file, add the following :


~~~
[php]


    'import' => array(
      ...
      'ext.YiiMongoDbSuite.*',
      'ext.YiiMongoDbSuite.test.*',
    ),

    'components' => array(
		'fixture'=>array(
			'class'=>'EMongoDbFixtureManager',
		),
      ...
    ),


~~~


That's all you can start using the fixture manager right now.


## MongoDocument object

~~~
[php]

    class User extends EMongoDocument
    {
      public $login;
      public $name;
      public $pass;

      // This method is required!
      public function getCollectionName()
      {
        return 'Users';
      }

      public function rules()
      {
        return array(
          array('login, pass', 'required'),
          array('login, pass', 'length', 'max' => 20),
          array('name', 'length', 'max' => 255),
        );
      }

      public function attributeLabels()
      {
        return array(
          'login'  => 'User Login',
          'name'   => 'Full name',
          'pass'   => 'Password',
        );
      }
    }


~~~


## Create fixture

Define the fixture collection like for ActiveRecords. Please
check http://www.yiiframework.com/doc/guide/1.1/en/test.fixture

Fixture file Users.php for collection elements User
~~~
[php]
return array(
    'sample1'=>array(
        'login'=>'userLogin',
        'name'=>'User firstname',
        'pass'=>'pass fixture value',
    ),
    'sample2'=>array(
        'login'=>'otherLogin',
        'name'=>'Other User firstname',
        'pass'=>'other pass value',
    ),
);
~~~

## Use it

Now you can use your fixtured records in your test cases
~~~
[php]
class UserTest extends EMongoDbTestCase {
	public $fixtures = array(
		'Users'=>'User',
	);
	public function testFindUser() {
		$criteria = new EMongoCriteria();
		$criteria->login('==',$this->Users['sample1']['login']);
		$userFromDb = User::model()->find($criteria);
		$this->assertEquals($userFromDb->login, $this->users['sample1']['login']);
	}
}
~~~


## Embedded documents

Embedded document can be defined in fixtures as array as all the 
difficult work to map embedded documents is done in the EMongoDocument class. 


## GridFS documents
MongoDB stores GridFS files in 2 collections: files and chunks. When specifying a fixture in EMongoDbTestCase, the fixture manager
will load just the files collection if a class name is provided. To load the GridFS data as well, specify it with a ':' prefix.

### Example Model:
~~~
[php]

    class File extends EMongoGridFS
    {
        public $name;
        public $type;
        public $myAttribute;

        public function getCollectionName()
        {
            return 'Files';
        }

        // ...
    }

~~~

### Files fixture

fixtures/Files.files.php:
~~~
[php]
return array(
    'file1' => array(
        '_id'         => new MongoId('5e2831cde2c3f9181500001c'),
        'name'        => 'file.png',
        'type'        => 'image/png',
        'uploadDate'  => new MongoDate(),
        'md5'         => 'a824ca31dfc84d6b585804a4056f6d45',
        'length'      => 1,
        'chunkSize'   => 1,
        'myAttribute' => 'value'
    ),
);

~~~

fixtures/Files.chunks.php:
~~~
[php]
return array(
    'file1_chunk0' => array(
        'files_id' => new MongoId('5e2831cde2c3f9181500001c'),
        'n'        => 0,
        'data'     => 'binary data here',
    ),
);

~~~


### Test

Note that if you're only testing metadata stored with the grid document, you do not need the chunks fixture.

~~~
[php]
class FileTest extends EMongoDbTestCase {
    public $fixtures = array(
        'files'        => 'File', // or ':Files.files'
        'files_chunks' => ':Files.chunks',
    );

    public function testFindFileSize()
    {
        $criteria = new EMongoCriteria();
        $criteria->myAttribute('==', $this->files['file1']['myAttribute']);
        $fileFromDb = File::model()->find($criteria);
        $this->assertEquals($fileFromDb->getSize(), $this->files['file1']['length']);
    }
}
~~~


## Multiple database support

Multiple Mongo database support was added in v 1.4.0, but requires slight modification from the instructions above.

### Setup

To support multiple databases, you'll need a component for each instance in your config file:

~~~
[php]


    'import' => array(
      // ...
      'ext.YiiMongoDbSuite.*',
      'ext.YiiMongoDbSuite.test.*',
    ),

    'components' => array(
      'mongodb1' => array(
        'class'  => 'EMongoDB',
        'dbName' => 'db1',
        // ...
      ),
      'mongodb2' => array(
        'class'  => 'EMongoDB',
        'dbName' => 'db2',
        // ...
      ),
      'fixture_db1' => array(
        'class'        => 'EMongoDbFixtureManager',
        'connectionID' => 'mongodb1',
        // ...
      ),
      'fixture_db2'=>array(
        'class'        => 'EMongoDbFixtureManager',
        'connectionID' => 'mongodb2',
        // ...
      ),
      // ...
    ),


~~~

### Models

In your models, you'll need to specify the MongoDb connection ID that it belongs to:

~~~
[php]

    class User extends EMongoDocument
    {
      protected $mongoComponentId = 'mongodb1';
      // ...
    }

~~~

### Unit tests

In your unit tests, you'll need to specify the MongoDb fixture manager that it belongs to:

~~~
[php]

    class UserTest extends EMongoDbTestCase
    {
      protected $fixtureComponentId = 'fixture_db1';
      // ...
    }

~~~
